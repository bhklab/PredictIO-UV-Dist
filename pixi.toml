[workspace]
name = "predictio-uv-dist"
authors = [
    "Farnoosh Abbas Aghababazadeh <bhklab.farnooshabbasaghababazadeh@gmail.com>"
]
description = "A distributed framework for univariable predictive modeling of Immuno-Oncology (IO) response, enabling analysis across multiple centers without sharing patient-level data."
license = "MIT"
channels = ["conda-forge", "bioconda"]
platforms = ["osx-arm64", "linux-64", "win-64", "osx-64"]

[environments]
quality = { features = ["quality"], solve-group = "default" }
docs = { features = ["docs"], solve-group = "default" }

[activation]
# convenient variables which can be used in scripts
env.CONFIG = "${PIXI_PROJECT_ROOT}/config"
env.METADATA = "${PIXI_PROJECT_ROOT}/metadata"
env.LOGS = "${PIXI_PROJECT_ROOT}/logs"
env.RAWDATA = "${PIXI_PROJECT_ROOT}/data/rawdata"
env.PROCDATA = "${PIXI_PROJECT_ROOT}/data/procdata"
env.RESULTS = "${PIXI_PROJECT_ROOT}/data/results"
env.SCRIPTS = "${PIXI_PROJECT_ROOT}/workflow/scripts"

scripts.post-setup = [
  "Rscript -e \"remotes::install_github('bhklab/PredictioR', ref = '46a2708fc7455a4cd064334b3de2407c7c82db73')\""
]

[dependencies]
python = ">=3.12"
ipython = "*"
ipykernel = "*"
jupyterlab = "*"
pip = "*"

# R and core packages
r-base = ">=4.4.1,<4.5"
r-devtools = "*"
r-remotes = "*"

# CRAN packages with versions (when available via conda)
r-hmisc = "==5.1_3"
r-circlize = "==0.4.16"
r-enrichr = "==3.2"
r-forestplot = "==3.1.3"
r-meta = "==7.0_0"

# Bioconductor packages
bioconductor-complexheatmap = "*"
bioconductor-gsva = "*"
bioconductor-multiassayexperiment = "*"
bioconductor-survcomp = "*"

[pypi-dependencies]
damply = ">=0.10.0, <0.11"


[tasks]
example_script = {cmd="python $SCRIPTS/example_script.py", description="Run an example script"}

############################################## QUALITY ###############################################
# Quality includes linting, type checking, and formatting
[feature.quality.dependencies]
ruff = "*"

[feature.quality.tasks]
ruff-check.cmd = ["ruff", "check"]
ruff-check.inputs = ["config/ruff.toml", "workflow"]
ruff-check.description = "Run ruff check"

ruff-format.cmd = ["ruff", "format"]
ruff-format.inputs = ["config/ruff.toml", "workflow"]
ruff-format.depends-on = ["ruff-check"]
ruff-format.description = "Run ruff format, run check first"

qc.depends-on = ["ruff-format", "ruff-check"]
qc.description = "Quality check: ruff check and format"

############################################## DOCS ################################################

[feature.docs.dependencies]
mkdocs = "*"
mkdocs-include-markdown-plugin = ">=7.0.0,<8"

[feature.docs.tasks.doc-build]
cmd = "mkdocs build -f mkdocs.yaml"
description = "Build documentation with mkdocs"

[feature.docs.tasks.doc-serve]
cmd = "mkdocs serve -f mkdocs.yaml"
depends-on = ["doc-build"]
description = "Serve documentation with mkdocs, runs doc-build first"
